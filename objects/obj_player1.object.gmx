<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_axis_deadzone(0, 0.25);
friction = 0.1;
max_speed = 20;
max_accel = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var control = -1;

if(player_num == 0) //change the control to the opposite player
    control = 1; 
else 
    control = 0;
    
var h_move = gamepad_axis_value(control, gp_axislh); //horizontal movement
var v_move = gamepad_axis_value(control, gp_axislv); //vertical movement

if((h_move != 0)|| (v_move != 0)){
    if(speed &lt; max_speed){
        hspeed = h_move * max_speed;
        vspeed = v_move * max_speed;
    }
}
else{
    hspeed = 0;
    vspeed = 0;
}

/*
if((h_move != 0) || (v_move != 0)){
    mdir = point_direction(0, 0, h_move, v_move);
    if(speed &lt; (max_speed)){
        hspeed += h_move*(max_accel);
        vspeed += v_move*(max_accel);
    }
}
*/
if(gamepad_button_check_pressed(player_num, gp_shoulderrb)){
    show_debug_message("Mid Punch");
}
if(gamepad_button_check_pressed(player_num, gp_shoulderr)){
    show_debug_message("High punch");
}
if(gamepad_button_check_pressed(player_num, gp_shoulderlb)){
    show_debug_message("Low kick");
}
if(gamepad_button_check_pressed(player_num, gp_shoulderl)){
    show_debug_message("Mid Kick");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_sidewall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hspeed &lt; 0){
    x -= 1;
}
else if(speed &gt; 0){
    x += 1;
}
hspeed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
