<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Objects
//controller deadzones
deadzone = 0.20
rsv = 0;
rsh = 0;
h_move = 0;
v_move = 0;

//control flags + other
friction = 3;
attacking = false;
grounded = false;
pointing = false;
shot = false;
stunned = false;

//additional objects
healthbar = instance_create(x, y - (sprite_height/2) - 10, obj_healthbar);
healthbar.owner = id;
pointer = instance_create(x, y, obj_tracer);
pointer.owner = id;
arrrow = 0;
stars = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player variables
//These are just default values for current game state compatibility
damage = 5;         //Amount of damage player deals
max_speed = 15;     //Maximum horizontal speed of player
max_hit = 100;      //Maximum hit points
gravy = 4;          //Yes, I called the gravity modifier gravy
jump = 80;          //How high the player will jump
hit = max_hit;      //Do not touch. Modify hit point values through enemy damage or max_hit
hooked_velocity = 70;   // how fast the player will move when landing a hook
recovery = 20;      /*Amount of animation played
                      Cannot exceed maximum sprite frames
                       - Already implemented, no need to manually check for exceeding value
                    */
attack_speed = 10;  //Frame amount to reset attack flag


/*Additional damage modifiers. Already applied on attack

  Allows for a more durable damage system allowing for more direct damage modification
  Ex. dump all damage into uppercut for a one hit, but no jab damage
  set hPunchMod to +90 and and mPunchMod to -damage to nullify the +damage from base model
*/
mPunchMod = 0;      //Additional jab damage
hPunchMod = 0;      //Additional uppercut damage
mKickMod = 0;       //Additional mid lick damage
lKickMod = 0;       //Additional low kick damage
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Parry
with(instance_create(x, y, obj_parry)){
    image_xscale = other.image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy stars
with(stars){
    instance_destroy();
}
stars = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Shot
shot = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End walking cycle
if(global.pause == 0){
    sprite_index = spr_idle;
    image_speed = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Low Kick Object
tmp = instance_create(x,y,obj_lowkick);
tmp.owner = id;
with(tmp){ // hitbox creation
    image_xscale = other.image_xscale;
    var dmg = other.damage + other.lKickMod;
    if(place_meeting(x,y,obj_parry)){ // if punch hit parry
        with(owner){
        attacking = true; // player is stunned
        stars = instance_create(x,y - 40,obj_stars); // create stars object signifying stunned
        stars.owner = other.id;
        alarm[0] = 300; // reset stunned
        alarm[8] = 300; // destroy stars
        }
    }
    else{
        var player = instance_place(x,y,obj_player);
        if(player != other.id){
            with(player){ // with another player
                hit -= dmg;
                image_blend = c_white; //hit flash
                alarm[1] = 2;
                audio_play_sound(snd_kick, 0, 0); //sound effect - kick
                hspeed += 15 * (other.owner.damage / 3) * other.image_xscale;  // give vertical movement to hit target
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mid Kick Object
tmp = instance_create(x,y,obj_midkick);
tmp.owner = id;
with(tmp){ // hitbox creation
    image_xscale = other.image_xscale;  // change hitbox to face player
    var dmg = other.damage + other.mKickMod;             // pass damage through
    if(place_meeting(x,y,obj_parry)){ // if punch hit parry
        with(owner){
        attacking = true; // player is stunned
        stars = instance_create(x,y - 40,obj_stars); // create stars object signifying stunned
        stars.owner = other.id;
        alarm[0] = 300; // reset stunned
        alarm[8] = 300; // destroy stars
    }
    }
    else{
        var player = instance_place(x,y,obj_player);
        if(player != other.id){
            with(player){ // with another player
                hit -= dmg;                     // damage from attacking fighter hitting recieving fighter
                image_blend = c_white;  // hit flash
                alarm[1] = 2;           // reset player colour
                audio_play_sound(snd_kick, 0, 0); //sound effect - kick 
                hspeed = 15 * (other.owner.damage / 3) * other.image_xscale; //add movement to kicked target
                vspeed = -25 * (other.owner.damage / 3);//give vertical movement to target
                grounded = false;
            }
        }    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///High Punch Object
tmp = instance_create(x,y,obj_highpunch);
tmp.owner = id;
with(tmp){ // hitbox creation
    image_xscale = other.image_xscale;
    var dmg = other.damage + other.hPunchMod;
    if(place_meeting(x,y,obj_parry)){ // if punch hit parry
        with(owner){
            attacking = true; // player is stunned
            stars = instance_create(x,y - 400,obj_stars); // create stars object signifying stunned
            stars.owner = other.id;
            alarm[0] = 300; // reset stunned
            alarm[8] = 300; // destroy stars
        }
    }
    else{
        var player = instance_place(x,y,obj_player);
        if(player != other.id){
            with(player){ // with another player
                hit -= dmg * 2;
                image_blend = c_white; //hit flash
                alarm[1] = 2;
                audio_play_sound(snd_punch, 0, 0); //sound effect - punch
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mid Punch Object
tmp = instance_create(x,y,obj_midpunch);
tmp.owner = id;
with(tmp){ // hitbox creation
    image_xscale = other.image_xscale;
    var dmg = other.damage + other.mPunchMod;
    if(place_meeting(x,y,obj_parry)){ // if punch hit parry
        with(owner){
            attacking = true; // player is stunned
            stars = instance_create(x,y - 400,obj_stars); // create stars object signifying stunned
            stars.owner = id;
            alarm[0] = 120; // reset stunned
            alarm[8] = 120; // destroy stars
        }
    }
    else{
        var player = instance_place(x,y,obj_player);
        if(player != other.id){
            with(player){ // with another player
                hit -= dmg;
                hspeed = 5 * (other.owner.damage / 3) * other.image_xscale;
                image_blend = c_white; //hit flash
                alarm[1] = 2;
                audio_play_sound(snd_punch, 0, 0); //sound effect - punch
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tint Players
if(player_num == 0)
    image_blend = global.clr1;
else
    image_blend = global.clr2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recover from attack
attacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Pausing in the step event
if(!global.pause){ //If paused then stop running the script



//Movement 
//Supposed to prevent player from going outside of the screen
x = clamp(x, sprite_width/2, room_width - sprite_width);
y = clamp(y, sprite_height/2, room_height - (sprite_height/2));

//switching movement control to other player
control = -1;
if(player_num == 0)
    control = 1;
else
    control = 0;
//collenting right analog stick input
rsv = gamepad_axis_value(player_num, gp_axisrv) * 200;
rsh = gamepad_axis_value(player_num, gp_axisrh) * 200;
//collecting left analog stick input
if(abs(gamepad_axis_value(control, gp_axislh)) &gt; deadzone) //manual deadzone
    h_move = gamepad_axis_value(control, gp_axislh); //horizontal movement
else
    h_move = 0;
if(abs(gamepad_axis_value(control, gp_axislv)) &gt; deadzone) //manual deadzone
    v_move = gamepad_axis_value(control, gp_axislv); //vertical movement
else
    v_move = 0;

//setting speed
if((h_move != 0) || (v_move != 0) &amp;&amp; !attacking){
    if(abs(hspeed) &lt; (max_speed)){
        hspeed += 8 * h_move;
        //vspeed += max_speed * v_move;
    }
    else if(hspeed &gt; max_speed){
        hspeed = max_speed;
    }
}
//movement sprite and player collision
if(hspeed != 0){
    if (image_xscale == 1){ // if the sprite is facing right
        if (h_move &gt; 0){    // if the sprite is moving right
            if(!place_meeting(x + 50,y,obj_player)){ // checking for player collision
                sprite_index = spr_move;
            }
            else{
                hspeed = 0;                     // setting hspeed to 0 of collision
            }
        }
        else{               // if the sprite is moving left
            sprite_index = spr_reverse;
        }
    }
    else{                   // if the sprite is facing left
        if(h_move &lt; 0){     // if the sprite is moving left
            if(!place_meeting(x - 50,y,obj_player)){ // checking for player collision
                sprite_index = spr_move;
            }
            else{
                hspeed = 0;
            }
        }
        else{               // if the sprite in moving right
            sprite_index = spr_reverse;
        }
    }
    if(hspeed != 0){
        image_speed = abs(hspeed) / max_speed; // movement animation speed matches player movement speed to create smooth walking to running cycle
        alarm[6] = 5;
    }
}

//jumping
if(!grounded){
    vspeed += gravy;
}
with(instance_place(x,y, obj_floor)){
        other.grounded = true;
        other.y = y - 190;
        other.vspeed = 0;
}
if(gamepad_axis_value(control, gp_axislv) &lt; -0.6 &amp;&amp; grounded){
    vspeed -= jump;
    grounded = false;
}
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grapple Arrow

//For the pausing in the step event
if(!global.pause){ //If paused then stop running the script



//Grapple Arrow 
with(pointer){
    image_blend = other.image_blend;
    if(abs(owner.rsv) &gt;= 150 || abs(owner.rsh) &gt;= 150){
        x = owner.x + (owner.rsh);   
        y = owner.y + (owner.rsv);
        if(!owner.pointing){
            other.arrow = instance_create(x, y, obj_arrow);
            other.arrow.owner = other;
        }
        other.arrow.image_angle = point_direction(owner.x, owner.y, x, y);
        owner.pointing = true;
    }
    else{
        x = owner.x;
        y = owner.y;
    }
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking

//Pausing in the step event
if(!global.pause){ //If paused then stop running the script


//Grapple
if(pointing){ // arrow exists
    if(gamepad_button_check_pressed(player_num, gp_shoulderr) &amp;&amp; !shot){ // grapple is ready and Right bumper
        audio_play_sound(snd_swing, 1, 0); //sound effect - swing
        shot = true; // is shot
        hook = instance_create(x,y, obj_hook); //create hook
        hook.owner = id; //set owner ID
        with(hook){ //with hook
            image_speed = 2;
            image_angle = owner.arrow.image_angle; //set image angle to arrow angle
            direction = image_angle; // make hook movement direction match angle
            speed = 45; // give hook speed
        } 
    }
}
//Attacks
else{
    // Mid Punch
    if(gamepad_button_check_pressed(player_num, gp_shoulderrb) &amp;&amp; !attacking){
        audio_play_sound(snd_swing, 1, 0); //sound effect - swing
        attacking = true;
        sprite_index = spr_midpunch;
        image_index = 0;// Set to beginning of animation
        alarm[2] = 5;   // Mid punch object creation
        alarm[0] = attack_speed;  // Reset attack flag
        alarm[6] = min(recovery, image_number);  // Reset to idle animation
        show_debug_message("Mid Punch from " + string(player_num + 1));
    }

    // High Punch
    if((gamepad_button_check_pressed(player_num, gp_shoulderr)  || (player_num == 1 &amp;&amp; keyboard_check_pressed(vk_up))) &amp;&amp; !attacking){
        audio_play_sound(snd_swing, 1, 0); //sound effect - swing
        attacking = true;
        sprite_index = spr_highpunch;
        image_index = 0;// Set to beginning of animation
        alarm[3] = 5;   // High punch object creation
        alarm[0] = attack_speed;  // Reset attack flag
        alarm[6] = min(recovery, image_number);  // Reset to idle animation
        show_debug_message("High punch from " + string(player_num + 1));
    }
    // Low Kick
    if(gamepad_button_check_pressed(player_num, gp_shoulderlb) &amp;&amp; !attacking){
        audio_play_sound(snd_swing, 1, 0); //sound effect - swing
        attacking = true;
        sprite_index = spr_lowkick;
        image_index = 0;// Set to beginning of animation
        alarm[5] = 5;   // Low kick object creation
        alarm[0] = attack_speed;  // Reset attack flag
        alarm[6] = min(recovery, image_number);  // Reset to idle animation
        show_debug_message("Low kick from " + string(player_num + 1));
    }
    // Mid Kick
    if(gamepad_button_check_pressed(player_num, gp_shoulderl) &amp;&amp; !attacking){
        audio_play_sound(snd_swing, 1, 0); //sound effect - swing
        attacking = true;
        sprite_index = spr_midkick;
        image_index = 0;// Set to beginning of animation
        alarm[4] = 5;   // Mid kick object creation
        alarm[0] = attack_speed;  // Reset attack flag
        alarm[6] = min(recovery, image_number);  // Reset to idle animation
        show_debug_message("Mid Kick from " + string(player_num + 1));
    }
    // Parry
    if(gamepad_button_check_pressed(player_num, gp_face4) &amp;&amp; !attacking){
        audio_play_sound(snd_swing, 1, 0);
        attacking = true;
        sprite_index = spr_parry;
        image_index = 0;
        alarm[9] = 9; // create parry obj
        alarm[0] = 50 + attack_speed;
        alarm[6] = min(recovery, image_number);
        show_debug_message("Parry from " + string(player_num + 1));
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Facing

//Pausing in the step event
if(!global.pause){ //If paused then stop running the script


//Facing
if(!global.game){
    if(id == global.p0)
        opposing = global.p1;
    else
        opposing = global.p0;

    if(x &lt; opposing.x){
        image_xscale = 1;
    }
    else{
        image_xscale = -1;
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
