<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
gamepad_set_axis_deadzone(0, 0.25);
gamepad_set_axis_deadzone(1, 0.25);
friction = 3;
damage = 5;
max_speed = 15;
max_hit = 100;
hit = max_hit;
attacking = false;
grounded = true;
healthbar = instance_create(x, y - (sprite_height/2) - 10, obj_healthbar);
healthbar.owner = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End walking cycle
sprite_index = spr_idle;
image_speed = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Low Kick Object
with(instance_create(x,y,obj_lowkick)){ // hitbox creation
    image_xscale = other.image_xscale;
    var dmg = other.damage;
    with(instance_place(x,y,obj_player)){ // with another player
        hit -= dmg;
        image_blend = c_white; //hit flash
        alarm[1] = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mid Kick Object
with(instance_create(x,y,obj_midkick)){ // hitbox creation
    image_xscale = other.image_xscale;
    var dmg = other.damage;
    with(instance_place(x,y,obj_player)){ // with another player
        hit -= dmg;
        image_blend = c_white; //hit flash
        alarm[1] = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///High Punch Object
with(instance_create(x,y,obj_highpunch)){ // hitbox creation
    image_xscale = other.image_xscale;
    var dmg = other.damage;
    with(instance_place(x,y,obj_player)){ // with another player
        hit -= dmg * 2;
        image_blend = c_white; //hit flash
        alarm[1] = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mid Punch Object
with(instance_create(x,y,obj_midpunch)){ // hitbox creation
    image_xscale = other.image_xscale;
    var dmg = other.damage;
    with(instance_place(x,y,obj_player)){ // with another player
        hit -= dmg;
        image_blend = c_white; //hit flash
        alarm[1] = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tint Players
if(player_num == 0)
    image_blend = c_red;
else
    image_blend = c_blue;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recover from attack
sprite_index = spr_idle;
attacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
//Supposed to prevent player from going outside of the screen
x = clamp(x, sprite_width/2, room_width - (sprite_width/2));
y = clamp(y, sprite_height/2, room_height - (sprite_height/2));


//switching movement control to other player
var control = -1;
if(player_num == 0)
    control = 1;
else
    control = 0;

//collecting analog stick input
var h_move = gamepad_axis_value(control, gp_axislh); //horizontal movement
var v_move = gamepad_axis_value(control, gp_axislv); //vertical movement

//setting speed
if((h_move != 0) || (v_move != 0) &amp;&amp; !attacking){
    if(abs(hspeed) &lt; (max_speed)){
        hspeed += max_speed * h_move;
        //vspeed += max_speed * v_move;
    }
}
if(hspeed != 0 &amp;&amp; !attacking){
    if (image_xscale == 1){ // if the sprite is facing right
        if (h_move &gt; 0){    // if the sprite is moving right
            sprite_index = spr_move;
        }
        else{               // if the sprite is moving left
            spr_index = spr_reverse;
        }
    }
    else{                   // if the sprite is facing left
        if(h_move &lt; 0){     // if the sprite is moving left
            sprite_index = spr_move;
        }
        else{               // if the sprite in moving right
            sprite_index = spr_reverse;
        }
    }
    image_speed = abs(hspeed) / max_speed; // slow movement sprite to start, builds up to run in theory
    alarm[6] = 10;
}

//jumping
if(gamepad_button_check_pressed(control, gp_face1) || keyboard_check(vk_space) &amp;&amp; grounded){
    vspeed -= 70;
    grounded = false;
    gravity = 3.5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking

// Mid Punch
if(gamepad_button_check_pressed(player_num, gp_shoulderrb) &amp;&amp; !attacking){
    attacking = true;
    image_index = 0; //set to beginning of animation
    sprite_index = spr_midpunch;
    alarm[2] = 5;
    alarm[0] = 10;
    show_debug_message("Mid Punch from " + string(player_num + 1));
}

// High Punch
if(gamepad_button_check_pressed(player_num, gp_shoulderr) &amp;&amp; !attacking){
    attacking = true;
    sprite_index = spr_highpunch;
    image_index = 0; //set to beginning of animation
    alarm[3] = 5;
    alarm[0] = 20;
    show_debug_message("High punch from " + string(player_num + 1));
}
// Low Kick
if(gamepad_button_check_pressed(player_num, gp_shoulderlb) &amp;&amp; !attacking){
    attacking = true;
    sprite_index = spr_lowkick;
    image_index = 0; //set to beginning of animation
    alarm[5] = 5;
    alarm[0] = 15;
    show_debug_message("Low kick from " + string(player_num + 1));
}
// Mid Kick
if(gamepad_button_check_pressed(player_num, gp_shoulderl) &amp;&amp; !attacking){
    attacking = true;
    sprite_index = spr_midkick;
    image_index = 0; //set to beginning of animation
    alarm[4] = 5;
    alarm[0] = 10;
    show_debug_message("Mid Kick from " + string(player_num + 1));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Facing
notme = true;
if(x &lt; instance_exists(obj_player).x){
    image_xscale = 1;
}
else{
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grounded = true;
gravity = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
