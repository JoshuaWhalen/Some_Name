<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_axis_deadzone(0, 0.25);
friction = 3;
max_speed = 10;

healthbar = instance_create(x, y - (sprite_height/2) - 10, obj_healthbar);
healthbar.owner = id;
hit = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(player_num == 0)
    image_blend = c_red;
else
    image_blend = c_blue;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = spr_idle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gamepad_button_check_pressed(0, gp_select) || gamepad_button_check_pressed(1, gp_select)){
    room_restart();
}

//gravity
if(!place_meeting(x, y + (sprite_height/2) + 1, obj_floor)){

    gravity = 2;
    grounded = false;
} 
else{
    gravity = 0;
    grounded = true;
}

//Supposed to prevent player from going outside of the screen
x = clamp(x, sprite_width/2, room_width - (sprite_width/2));
y = clamp(y, sprite_height/2, room_height - (sprite_height/2));


//switching movement control to other player
var control = -1;
if(player_num == 0)
    control = 1;
else
    control = 0;

//collecting analog stick input
var h_move = gamepad_axis_value(control, gp_axislh); //horizontal movement
var v_move = gamepad_axis_value(control, gp_axislv); //vertical movement

//setting speed
if((h_move != 0) || (v_move != 0)){
    if(speed &lt; (max_speed)){
        hspeed += max_speed * h_move;
        //vspeed += max_speed * v_move;
    }
}
if(hspeed &gt; 0){
    sprite_index = spr_move;
    alarm[0] = 10;
}

//jumping
if(gamepad_button_check_pressed(control, gp_face1) &amp;&amp; grounded){
    vspeed -= 30;
}

//attacks
if(gamepad_button_check_pressed(player_num, gp_shoulderrb)){
    sprite_index = spr_midpunch;
    image_index = 0; //set to beginning of animation
    with(instance_create(x,y,obj_midpunch)){
        image_xscale = other.image_xscale;
    }
    alarm[0] = 10;
    show_debug_message("Mid Punch from " + string(player_num + 1));
}
if(gamepad_button_check_pressed(player_num, gp_shoulderr)){
    sprite_index = spr_highpunch;
    image_index = 0; //set to beginning of animation
    with(instance_create(x,y,obj_highpunch)){
        image_xscale = other.image_xscale;
    }
    alarm[0] = 10;
    show_debug_message("High punch from " + string(player_num + 1));
}
if(gamepad_button_check_pressed(player_num, gp_shoulderlb)){
    sprite_index = spr_lowkick;
    image_index = 0; //set to beginning of animation
    with(instance_create(x,y,obj_lowkick)){
        image_xscale = other.image_xscale;
    }
    alarm[0] = 10;
    show_debug_message("Low kick from " + string(player_num + 1));
}
if(gamepad_button_check_pressed(player_num, gp_shoulderl)){
    sprite_index = spr_midkick;
    image_index = 0; //set to beginning of animation
    with(instance_create(x,y,obj_midkick)){
        image_xscale = other.image_xscale;
    }
    alarm[0] = 10;
    show_debug_message("Mid Kick from " + string(player_num + 1));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_lowkick">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other){
    other.hit += 1/3; //issue: 1 actual hit is calculated multiple times as a collision. Must be fixed at some point.
    image_blend = c_white; //flash the player white to show the player is hit
    alarm[1] = 2; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_midkick">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other){
    other.hit += 1/3; //issue: 1 actual hit is calculated multiple times as a collision. Must be fixed at some point.
    image_blend = c_white; //flash the player white to show the player is hit
    alarm[1] = 2; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_highpunch">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other){
    other.hit += 1/3; //issue: 1 actual hit is calculated multiple times as a collision. Must be fixed at some point.
    image_blend = c_white; //flash the player white to show the player is hit
    alarm[1] = 2; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_midpunch">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other){
    other.hit += 1/3; //issue: 1 actual hit is calculated multiple times as a collision. Must be fixed at some point.
    image_blend = c_white; //flash the player white to show the player is hit
    alarm[1] = 2; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gamepad_button_check_pressed(player_num, gp_shoulderrb) || gamepad_button_check_pressed(player_num, gp_shoulderr) || 
    gamepad_button_check_pressed(player_num, gp_shoulderlb) || gamepad_button_check_pressed(player_num, gp_shoulderl)){
    
        //image blending for hit boxes not yet working
        /*if(gamepad_button_check_pressed(player_num, gp_shoulderrb)){
            other.sprite_index = spr_midpunch_hit;
        }
        if(gamepad_button_check_pressed(player_num, gp_shoulderr)){
            other.sprite_index = spr_highpunch_hit;
        }
        if(gamepad_button_check_pressed(player_num, gp_shoulderlb)){
            other.sprite_index = spr_midkick_hit;
        }
        if(gamepad_button_check_pressed(player_num, gp_shoulderl)){
            other.sprite_index = spr_lowkick_hit;
        }*/
        
        with(other){
            hit += 1/3; //issue: 1 actual hit is calculated multiple times as a collision. Must be fixed at some point.
            image_blend = c_white; //flash the player white to show the player is hit
            alarm[1] = 2; 
        }
}
if x&lt;other.x then image_xscale=1 else image_xscale=-1
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
